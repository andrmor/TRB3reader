#ifndef ADATAHUB_H
#define ADATAHUB_H

#include <QObject>
#include <QVector>
#include <QMutex>

class MasterConfig;

class AOneEvent
{
public:

    int     CountChannels() const {return Signals.size();}

    float   GetSignal(int ichannel) const;
    float   GetSignalFast(int ichannel) const {return Signals.at(ichannel);}
    bool    SetSignal(int ichannel, float value);
    void    SetSignalFast(int ichannel, float value) {Signals[ichannel] = value;}

    const QVector<float>* GetSignals() const {return &Signals;}
    void    SetSignals(const QVector<float> *vector) {Signals = *vector;}

    bool    IsRejected() const {return Rejected;}
    void    SetRejectedFlag(bool flag) {Rejected = flag;}

    const float* GetPosition() const {return Position;}
    void    SetPosition(const float* XYZ)          {Position[0] = XYZ[0]; Position[1] = XYZ[1]; Position[2] = XYZ[2];}
    void    SetPosition(float x, float y, float z) {Position[0] = x;      Position[1] = y;      Position[2] = z;     }

    const QVector< QVector<float>* >* GetWaveforms() const { return &Waveforms; }
    void    SetWaveforms(const QVector< QVector<float>* >* waveforms) { Waveforms = *waveforms;}
    void    ClearWaveforms();
    const QVector<float>* GetWaveform(int ichannel) const;
    const QVector<float>* GetWaveformFast(int ichannel) const {return Waveforms.at(ichannel);}
    float   GetWaveformMax(int ichannel) const;
    float   GetWaveformMin(int ichannel) const;
    int     GetWaveformMaxSample(int ichannel) const;
    int     GetWaveformMinSample(int ichannel) const;
    int     GetWaveformSampleWhereFirstBelow(int ichannel, float threshold) const;
    int     GetWaveformSampleWhereFirstAbove(int ichannel, float threshold) const;

    void    SetMultiplicitiesPositive(const int* multi) {MultiplicityPos[0] = multi[0]; MultiplicityPos[1] = multi[1]; MultiplicityPos[2] = multi[2];}
    void    SetMultiplicitiesNegative(const int* multi) {MultiplicityNeg[0] = multi[0]; MultiplicityNeg[1] = multi[1]; MultiplicityNeg[2] = multi[2];}
    const int*  GetMultiplicitiesPositive() const {return MultiplicityPos;}
    const int*  GetMultiplicitiesNegative() const {return MultiplicityNeg;}

    void    SetSumSigPositive(const float* sumsig) {SumSigPos[0] = sumsig[0]; SumSigPos[1] = sumsig[1]; SumSigPos[2] = sumsig[2];}
    void    SetSumSigNegative(const float* sumsig) {SumSigNeg[0] = sumsig[0]; SumSigNeg[1] = sumsig[1]; SumSigNeg[2] = sumsig[2];}
    const float*  GetSumSigPositive() const  {return SumSigPos;}
    const float*  GetSumSigNegative() const  {return SumSigNeg;}

private:
    QVector<float>              Signals;     // [logical_channel]
    QVector< QVector<float>* >  Waveforms;   // [logical_channel] [sample#] - may contain 0 pointer - if waveworm has no data

    bool                        Rejected;    // event is rejected

    // Optional information, generated by reconstruction by script

    float                       Position[3];           // x y z

    int                         MultiplicityPos[3];    // Pad multiplicity - can be used independently for x y z
    int                         MultiplicityNeg[3];    // same for negative

    float                       SumSigPos[3];          // sum dignals - can be used independently for x y z
    float                       SumSigNeg[3];          // sum signals - can be used independently for x y z
};

class ADataHub : public QObject
{
    Q_OBJECT

public:
    ADataHub(const MasterConfig& Config);
    ~ADataHub();

    // Counts
    int              CountEvents() {return Events.size();}
    int              CountChannels();

    // General handling
    void             Clear();
    void             AddEvent(AOneEvent* Event);
    void             AddEventFast(AOneEvent* Event) {Events << Event;}
    void             RemoveEvent(int ievent);
    void             RemoveEventFast(int ievent) {Events.removeAt(ievent);}
    const AOneEvent* GetEvent(int ievent) const;
    AOneEvent*       GetEvent(int ievent);
    const AOneEvent* GetEventFast(int ievent) const {return Events.at(ievent);}
    AOneEvent*       GetEventFast(int ievent) {return Events[ievent];}

    // Signals
    float            GetSignal(int ievent, int ichannel);
    float            GetSignalFast(int ievent, int ichannel);
    const QVector<float>* GetSignals(int ievent) const;
    const QVector<float>* GetSignalsFast(int ievent) const;
    bool             SetSignal(int ievent, int iLogicalChannel, float value);
    void             SetSignalFast(int ievent, int iLogicalChannel, float value);
    bool             SetSignals(int ievent, const QVector<float>* vector);
    void             SetSignalsFast(int ievent, const QVector<float>* vector);

    // Rejection
    bool             IsRejected(int ievent) const;
    bool             IsRejectedFast(int ievent) const;
    bool             SetRejectedFlag(int ievent, bool flag);
    void             SetRejectedFlagFast(int ievent, bool flag);
    void             SetAllRejectedFlag(bool flag);

    // Position
    const float*     GetPosition(int ievent) const;
    const float*     GetPositionFast(int ievent) const;
    bool             SetPosition(int ievent, const float* XYZ);
    bool             SetPosition(int ievent, float x, float y, float z);
    void             SetPositionFast(int ievent, const float* XYZ);
    void             SetPositionFast(int ievent, float x, float y, float z);

    // Waveforms
    const QVector< QVector<float>* >* GetWaveforms(int ievent) const;
    const QVector<float>* GetWaveform(int ievent, int ichannel) const;
    const QVector<float>* GetWaveformFast(int ievent, int ichannel) const;

        //utilities
    float            GetWaveformMax(int ievent, int ichannel) const;
    float            GetWaveformMin(int ievent, int ichannel) const;
    int              GetWaveformMaxSample(int ievent, int ichannel) const;
    int              GetWaveformMinSample(int ievent, int ichannel) const;
    int              GetWaveformSampleWhereFirstBelow(int ievent, int ichannel, float threshold) const;
    int              GetWaveformSampleWhereFirstAbove(int ievent, int ichannel, float threshold) const;

    // Multiplicities
    const int*       GetMultiplicityPositive(int ievent) const;
    const int*       GetMultiplicityPositiveFast(int ievent) const;
    const int*       GetMultiplicityNegative(int ievent) const;
    const int*       GetMultiplicityNegativeFast(int ievent) const;
    bool             SetMultiplicityPositive(int ievent, const int* multi);
    void             SetMultiplicityPositiveFast(int ievent, const int *multi);
    bool             SetMultiplicityNegative(int ievent, const int* multi);
    void             SetMultiplicityNegativeFast(int ievent, const int *multi);

    // Sum signals
    const float*     GetSumSignalPositive(int ievent) const;
    const float*     GetSumSignalPositiveFast(int ievent) const;
    const float*     GetSumSignalNegative(int ievent) const;
    const float*     GetSumSignalNegativeFast(int ievent) const;
    bool             SetSumSignalPositive(int ievent, const float* sums);
    void             SetSumSignalPositiveFast(int ievent, const float *sums);
    bool             SetSumSignalNegative(int ievent, const float* sums);
    void             SetSumSignalNegativeFast(int ievent, const float* sums);

    //save / load
    const QString    Save(const QString &FileName, bool bSavePositions, bool bSkipRejected);
    const QString    Load(const QString &AppendFromFileName, bool bLoadPositionXYZ);

    const MasterConfig& getConfig() {return Config;}

private:
    const MasterConfig& Config;
    QVector < AOneEvent* > Events;

    QMutex           Mutex;

signals:
    void             requestGuiUpdate();
    void             reportProgress(int);

};

#endif // ADATAHUB_H
